{-# LANGUAGE BangPatterns #-}
import Control.Exception

main = do
    evaluate (fst (f [1..4000000] (0 :: Int, 1 :: Int)))

f []     c = c
f (x:xs) c = f xs (tick x c)

tick x (c0, c1) | even x    = (c0, c1 + 1)
                | otherwise = (c0 + 1, c1)

[0,0,0]
takes
1.782 vec: 0
{-# LANGUAGE BangPatterns #-}
import Control.Exception

main = do
    evaluate (fst (f [1..4000000] (0 :: Int, 1 :: Int)))

f []     c = c
f (x:xs) c = f xs (tick x c)

tick x (c0, c1) | even x    = (c0, c1 + 1)
                | otherwise = (c0 + 1, c1)

[0,0,0]
takes
1.8 vec: 0
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] !c = c
f (x : xs) !c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[1,1,0]
takes
0.87600005 vec: 3
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) !c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,1,0]
takes
0.87200004 vec: 2
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] !c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[1,0,0]
takes
1.798 vec: 1
{-# LANGUAGE BangPatterns #-}
import Control.Exception

main = do
    evaluate (fst (f [1..4000000] (0 :: Int, 1 :: Int)))

f []     c = c
f (x:xs) c = f xs (tick x c)

tick x (c0, c1) | even x    = (c0, c1 + 1)
                | otherwise = (c0 + 1, c1)

[0,0,0]
takes
1.806 vec: 0
{-# LANGUAGE BangPatterns #-}
import Control.Exception

main = do
    evaluate (fst (f [1..4000000] (0 :: Int, 1 :: Int)))

f []     c = c
f (x:xs) c = f xs (tick x c)

tick x (c0, c1) | even x    = (c0, c1 + 1)
                | otherwise = (c0 + 1, c1)

[0,0,0]
takes
1.7959999 vec: 0
{-# LANGUAGE BangPatterns #-}
import Control.Exception

main = do
    evaluate (fst (f [1..4000000] (0 :: Int, 1 :: Int)))

f []     c = c
f (x:xs) c = f xs (tick x c)

tick x (c0, c1) | even x    = (c0, c1 + 1)
                | otherwise = (c0 + 1, c1)

[0,0,0]
takes
1.8040001 vec: 1
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] !c = c
f (x : xs) !c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[1,1,0]
takes
0.87200004 vec: 2
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] !c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[1,0,0]
takes
1.7960001 vec: 0
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] !c = c
f (x : xs) !c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[1,1,0]
takes
0.864 vec: 2
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) !c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,1,0]
takes
0.85999995 vec: 3
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] !c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[1,0,0]
takes
1.79 vec: 0
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.786 vec: 0
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.79 vec: 0
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.772 vec: 0
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.786 vec: 0
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.785 vec: 1
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.816 vec: 1
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.82 vec: 1
{-# LANGUAGE BangPatterns #-}
module Main (main) where
import Control.Exception
main = do evaluate (fst (f [1 .. 4000000] (0 :: Int, 1 :: Int)))
f [] c = c
f (x : xs) c = f xs (tick x c)
tick x (c0, c1)
  | even x = (c0, c1 + 1)
  | otherwise = (c0 + 1, c1)
[0,0,0]
takes
1.7959999 vec: 1
